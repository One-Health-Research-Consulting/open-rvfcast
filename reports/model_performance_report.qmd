---
format:
  html:
    code-fold: true
    code-tools: true
    embed-resources: true
    page-layout: full
---

# Model Performance Report


```{r setup}
#| message: FALSE
#| warning: FALSE
#| echo: FALSE
library(spatialsample)
library(rsample)
library(yardstick)
library(tidymodels)
library(vip)
library(git2r)
library(xgboost)
library(targets)

# xgb_model <- tar_read()
# test_data <- tar_read()

commit <- sha(repository_head()) |> substr(1, 7)
branch <- repository_head()$name
print(glue::glue("Rendered: {lubridate::now(tz = 'America/New_York')} EDT\nFrom: {commit} {branch}"))
```

```{r}
#| echo: FALSE
# source("scripts/spatiotemporal_cv.R")
```

::: panel-tabset
## CV
```{r}

```

## Model Diagnostics
```{r}


```

## Performance Metrics
```{r}

```

## ROC
```{r}
# Plot the ROC curve
# autoplot(roc_data)
```

## Shap Scores
```{r}
# # Compute SHAP values for the entire dataset
# shap_values <- shap.values(xgb_model = model, X_train = agaricus.train$data)

# # Extract SHAP scores and mean SHAP importance
# shap_scores <- shap_values$shap_score
# shap_importance <- shap_values$mean_shap_score

# shap.plot.summary(shap_scores)
```

## Ceteris Paribus
```{r}

```

## Feature Importance
```{r}
# Use Gain for understanding feature impact on predictions, Frequency for how often a feature is used.
# xgb.plot.importance(importance_matrix = importance)
```

:::
